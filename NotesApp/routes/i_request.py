from abc import ABC, abstractmethod
from typing import Union, Tuple, List

from flask import Response
from wtforms import Form


class RequestPayload(dict):
    """
    Data parsed from request
    Dictionary generated by IRequest.get_request_data - data sent with request
    """
    pass


class ContextData(dict):
    """
    Data sent beside main request data
    Dictionary generated by IRequest.get_request_data - data sent beside
    request
    """

    @property
    def person_visibility(self):
        if self.get("jwt_admin"):
            return self.get("admin_visibility")
        return self.get("jwt_scope")

    @property
    def admin(self):
        return self.get("jwt_admin", False)

    @property
    def method(self):
        return self.get("method", None)


class RequestData(dict):
    """
    Data containing RequestPayload and ContextData dictionaries
    """
    def __init__(
            self,
            data: RequestPayload,
            context: ContextData,
            form: dict = None,  # additionally form data stored here
    ):
        self.data = data
        self.context = context
        self.form = form or None
        super().__init__()

    def get_data(self, key, default=None):
        if key in self.context:
            return self.context[key]
        if key in self.data:
            return self.data[key]
        return default


class Cookie:

    def __init__(
            self,
            key: str,
            value: Union[str, None],
    ):
        self.key = key
        self.value = value

    def set_cookie(self, response: Response) -> Response:
        if self.value is not None:
            response.set_cookie(self.key, self.value)
        else:
            response.delete_cookie(self.key)
        return response


class ResponseData:
    """
    Object for response preparation in IRequest.serialize_response
    """

    def __init__(
            self,
            template: str = None,
            resource: dict = None,
            form: Form = None,
            status_code: int = None,
            cookies: List[Cookie] = None,
            **kwargs,
    ):
        self.template = template
        self.resource = resource or {}
        self.form = form
        self.status_code = status_code
        self.cookies = cookies or []
        self.kwargs = kwargs

    @property
    def is_redirect(self):
        return 'redirect' in self.kwargs


class IRequestData(ABC):

    @classmethod
    @abstractmethod
    def get_request_data(cls) -> RequestData:
        """Get data sent in request from user."""
        pass

    @classmethod
    @abstractmethod
    def serialize_response(
            cls,
            context_data: ContextData,
            response_data: ResponseData,
    ) -> Union[Tuple[Response, int], str, Response]:
        """
        Preparing response based on Content-Type of a request and parameters.

        :param context_data: dictionary of context data from user - data sent
            beside user request(get_request_data)
        :param response_data: object containing parameters for respone
            template: path  to html be rendered (if applicabale)
            requested_data: data requested by user
            kwargs: all side data generated for response
        :return: Response type object with status code or rendered html (str)
        """
        pass


class IRequestLogic:
    pass
