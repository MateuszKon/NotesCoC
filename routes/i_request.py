from abc import ABC, abstractmethod
from typing import Union, Tuple

from flask import Response


class RequestData(dict):
    """
    Dictionary generated by IRequest.get_request_data - data sent with request
    """
    pass


class RequestHiddenData(dict):
    """
    Dictionary generated by IRequest.get_request_data - stores hidden data
    sent without user knowledge
    """


class ResponseData:
    """
    Object for response preparation in IRequest.serialize_response
    """

    def __init__(
            self,
            template: str = None,
            requested_data: dict = None,
            **kwargs,
    ):
        self.template = template
        if requested_data is None:
            requested_data = {}
        self.requested_data = requested_data
        self.kwargs = kwargs


class IRequestData(ABC):

    @classmethod
    @abstractmethod
    def get_request_data(cls) -> Tuple[RequestData, RequestHiddenData]:
        """Get data sent in request from user.
         Data get from user is stored in first return item RequestData,
         second returned item is hidden data sent with request"""
        pass

    @classmethod
    @abstractmethod
    def serialize_response(
            cls,
            data: RequestData,
            response_data: ResponseData,
    ) -> Union[Tuple[Response, int], str]:
        """
        Preparing response based on Content-Type of a request and parameters.

        :param data: dictionary of request data from user (get_request_data)
        :param response_data: object containing parameters for respone
            template: path  to html be rendered (if applicabale)
            requested_data: data requested by user
            kwargs: all side data generated for response
        :return: Response type object with status code or rendered html (str)
        """
        pass


class IRequestLogic(ABC):
    pass
